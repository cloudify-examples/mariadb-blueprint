tosca_definitions_version: cloudify_dsl_1_3

description: >
  This blueprint creates a MariaDB Cluster.

imports:
  - http://www.getcloudify.org/spec/cloudify/4.2/types.yaml
  - http://www.getcloudify.org/spec/utilities-plugin/1.4.4/plugin.yaml
  - http://www.getcloudify.org/spec/diamond-plugin/1.3.5/plugin.yaml
  - http://www.getcloudify.org/spec/awssdk-plugin/1.2.0.1/plugin.yaml
  - https://github.com/cloudify-cosmo/cloudify-aws-plugin/releases/download/1.5.1.2/plugin.yaml
  - imports/cloud-config.yaml
  - imports/database.yaml

inputs:

  ami:
    description: >
      An AWS AMI. Tested with a Centos 7.3 image.
    default: { get_attribute: [ centos_core_ami, aws_resource_id ] }

  instance_type:
    description: >
      The AWS instance_type. Tested with m3.medium, although that is unnecessarily large.
    default: t2.medium

  agent_user:
    description: >
      The username of the agent running on the instance created from the image.
    default: ec2-user

  vpc_id:
    description: The ID of the AWS VPC that will contain the NIC and Subnet.
    default: { get_secret: vpc_id }

  private_subnet_id:
    description: The ID of the AWS Subnet that will contain the master_nic.
    default: { get_secret: private_subnet_id }

  availability_zone:
    description: The availability zone where the VM should be deployed. This is the same as that of the Public Subnet.
    default: { get_secret: availability_zone }

  agent_key_private:
    description: The material of the private key.
    default: { get_secret: agent_key_private }

  agent_key_public:
    description: The material of a public SSH key.
    default: { get_secret: agent_key_public }

  manager_network:
    default: default

dsl_definitions:

    aws_config: &aws_config
      aws_access_key_id: { get_secret: aws_access_key_id }
      aws_secret_access_key: { get_secret: aws_secret_access_key }
      ec2_region_name: { get_secret: ec2_region_name }
      ec2_region_endpoint: { get_secret: ec2_region_endpoint }

    client_config: &client_config
      aws_access_key_id: { get_secret: aws_access_key_id }
      aws_secret_access_key: { get_secret: aws_secret_access_key }
      region_name: { get_secret: ec2_region_name }

node_templates:

  mysql_requirements:
    type: cloudify.nodes.Root

  host:
    type: cloudify.aws.nodes.Instance
    properties:
      agent_config:
        network: { get_input: manager_network }
        install_method: init_script
        user: { get_input: agent_user }
        port: 22
        key: { get_input: agent_key_private }
      aws_config: *aws_config
      image_id: { get_input: ami }
      instance_type: { get_input: instance_type }
    relationships:
    - type: cloudify.aws.relationships.instance_connected_to_eni
      target: nic
    - type: cloudify.relationships.depends_on
      target: cloudify_host_cloud_config
    - type: cloudify.relationships.depends_on
      target: centos_core_ami
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: aws.cloudify_aws.ec2.instance.create
          inputs:
            args:
              image_id: { get_input: ami }
              placement: { get_input: availability_zone }
              user_data: { get_attribute: [ cloudify_host_cloud_config, cloud_config ] }

  centos_core_ami:
    type: cloudify.nodes.aws.ec2.Image
    properties:
      resource_config:
        kwargs:
          Filters:
          - Name: name
            Values:
            - 'CentOS 7.3.1611 x86_64 with cloud-init (HVM)'
          - Name: owner-id
            Values:
            - '057448758665'
      client_config: *client_config

  nic:
    type: cloudify.nodes.aws.ec2.Interface
    properties:
      client_config: *client_config
      resource_config:
        kwargs:
          Description: Created by mariadb-blueprint aws-blueprint.yaml.
          SubnetId: { get_input: private_subnet_id }
    relationships:
      - type: cloudify.relationships.depends_on
        target: private_subnet
      - type: cloudify.relationships.depends_on
        target: security_group
    interfaces:
      cloudify.interfaces.lifecycle:
        configure:
          inputs:
            resource_config:
              Description: Created by mariadb-blueprint aws-blueprint.yaml.
              SubnetId: { get_input: private_subnet_id }
              Groups:
              - { get_attribute: [ security_group, aws_resource_id ] }

  security_group_rules:
    type: cloudify.nodes.aws.ec2.SecurityGroupRuleIngress
    properties:
      client_config: *client_config
      resource_config:
        kwargs:
          IpPermissions:
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            IpRanges:
            - CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 3306
            ToPort: 3306
            IpRanges:
            - CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 4444
            ToPort: 4444
            IpRanges:
            - CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 4567
            ToPort: 4568
            IpRanges:
            - CidrIp: 0.0.0.0/0
    relationships:
    - type: cloudify.relationships.contained_in
      target: security_group

  security_group:
    type: cloudify.nodes.aws.ec2.SecurityGroup
    properties:
      resource_config:
        kwargs:
          GroupName: MariaDBExampleSecurityGroup
          Description: Created by mariadb-blueprint aws-blueprint.yaml.
          VpcId: { get_input: vpc_id }
      client_config: *client_config
    relationships:
    - type: cloudify.relationships.depends_on
      target: vpc

  private_subnet:
    type: cloudify.nodes.aws.ec2.Subnet
    properties:
      client_config: *client_config
      use_external_resource: true
      resource_id: { get_input: private_subnet_id }
      resource_config:
        kwargs:
          CidrBlock: 'N/A'
          AvailabilityZone: 'N/A'
    relationships:
      - type: cloudify.relationships.depends_on
        target: vpc

  vpc:
    type: cloudify.nodes.aws.ec2.Vpc
    properties:
      client_config: *client_config
      use_external_resource: true
      resource_id: { get_input: vpc_id }
      resource_config:
        kwargs:
          CidrBlock: 'N/A'

outputs:

  cluster_addresses:
    description: Cluster Addresses
    value: { get_attribute: [ cluster, cluster_addresses ] }

groups:

  app_group:
    members:
    - mysql
    - host
    - nic

policies:

  app_group_policy:
    type: cloudify.policies.scaling
    properties:
      default_instances:  1
    targets: [app_group]

